[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Peter\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Peter\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.7 (Oracle Corporation Java 21.0.1)
[debug]       Load.loadUnit: plugins took 84.6342ms
[debug]       Load.loadUnit: defsScala took 0.2397ms
[debug] [Loading] Scanning directory C:\Users\Peter\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Peter\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 15.5179 ms
[debug]           Load.resolveProject(global-plugins) took 46.4887ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Peter\.sbt\1.0\plugins, plugins: List(<none>))) took 80.4263ms
[debug] [Loading] Done in C:\Users\Peter\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 102.5587ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1897ms
[debug]     Load.loadUnit(file:/C:/Users/Peter/.sbt/1.0/plugins/, ...) took 194.8691ms
[debug]   Load.apply: load took 368.4616ms
[debug]   Load.apply: resolveProjects took 6.5158ms
[debug]   Load.apply: finalTransforms took 53.529ms
[debug]   Load.apply: config.delegates took 8.2564ms
[debug]   Load.apply: Def.make(settings)... took 435.8355ms
[debug]   Load.apply: structureIndex took 82.625ms
[debug]   Load.apply: mkStreams took 1.8641ms
[info] loading global plugins from C:\Users\Peter\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3089.4797ms
[debug]           Load.loadUnit: plugins took 25.3448ms
[debug]           Load.loadUnit: defsScala took 0.0029ms
[debug] [Loading] Scanning directory C:\Users\Peter\Documents\DE\hw-4-6-pro\project
[debug]             Load.loadUnit: mkEval took 5.5904ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Peter\Documents\DE\hw-4-6-pro\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.3975 ms
[info] loading settings for project hw-4-6-pro-build from idea.sbt ...
[debug]               Load.resolveProject(hw-4-6-pro-build) took 2.4871ms
[debug]             Load.loadTransitive: finalizeProject(Project(id hw-4-6-pro-build, base: C:\Users\Peter\Documents\DE\hw-4-6-pro\project, plugins: List(<none>))) took 4.4202ms
[debug] [Loading] Done in C:\Users\Peter\Documents\DE\hw-4-6-pro\project, returning: (hw-4-6-pro-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1900.0449ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.3058ms
[debug]         Load.loadUnit(file:/C:/Users/Peter/Documents/DE/hw-4-6-pro/project/, ...) took 1931.5375ms
[debug]       Load.apply: load took 1933.1818ms
[debug]       Load.apply: resolveProjects took 0.1118ms
[debug]       Load.apply: finalTransforms took 7.2435ms
[debug]       Load.apply: config.delegates took 0.3621ms
[debug]       Load.apply: Def.make(settings)... took 71.8459ms
[debug]       Load.apply: structureIndex took 21.0549ms
[debug]       Load.apply: mkStreams took 0.0024ms
[info] loading project definition from C:\Users\Peter\Documents\DE\hw-4-6-pro\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 18350.5654ms
[debug]     Load.loadUnit: defsScala took 0.0032ms
[debug] [Loading] Scanning directory C:\Users\Peter\Documents\DE\hw-4-6-pro
[debug]       Load.loadUnit: mkEval took 0.2406ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.6231 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 72.4148ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Peter\Documents\DE\hw-4-6-pro, plugins: List(<none>))) took 75.5837ms
[debug] [Loading] Done in C:\Users\Peter\Documents\DE\hw-4-6-pro, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2889.1701ms
[debug]     Load.loadUnit: cleanEvalClasses took 16.4562ms
[debug]   Load.loadUnit(file:/C:/Users/Peter/Documents/DE/hw-4-6-pro/, ...) took 21257.0538ms
[debug] Load.apply: load took 21261.4764ms
[debug] Load.apply: resolveProjects took 0.7998ms
[debug] Load.apply: finalTransforms took 25.8835ms
[debug] Load.apply: config.delegates took 0.3084ms
[debug] Load.apply: Def.make(settings)... took 194.8126ms
[debug] Load.apply: structureIndex took 31.6559ms
[debug] Load.apply: mkStreams took 0.0023ms
[info] set current project to hw-4-6-pro (in build file:/C:/Users/Peter/Documents/DE/hw-4-6-pro/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51422 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51422, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to hw-4-6-pro (in build file:/C:/Users/Peter/Documents/DE/hw-4-6-pro/)
[debug] > Exec(idea-shell, None, None)
